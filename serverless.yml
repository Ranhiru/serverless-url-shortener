service: url-shortner

provider:
  name: aws
  runtime: nodejs8.10

  stage: dev
  region: us-east-1

  iamRoleStatements:
     - Effect: Allow
       Action:
         - 'dynamodb:PutItem'
         - 'dynamodb:GetItem'
       Resource:
         'Fn::Join':
           - ''
           - - 'arn:aws:dynamodb:'
             - Ref: 'AWS::Region'
             - ':'
             - Ref: 'AWS::AccountId'
             - ':table/'
             - Ref: RedirectionsTable
  environment:
    TOKEN_SIZE: 10
    TABLE_NAME:
      Ref: RedirectionsTable

functions:
  create_redirection:
    handler: redirector.redirector
  redirect:
    handler: redirector.redirect

resources:
  Resources:
    RedirectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
